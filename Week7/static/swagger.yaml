openapi: 3.0.3
info:
  title: Book Management API
  description: API for managing books with JWT authentication and ETag support (Cursor-based pagination)
  version: 1.3.1

servers:
  - url: http://localhost:5001
    description: Local development server

security:
  - bearerAuth: []

paths:
  /api/v1/login:
    post:
      summary: Login to obtain JWT token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: 123456
      responses:
        200:
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          description: Invalid credentials

  /api/v1/books:
    get:
      summary: Get all books with optional filters (cursor-based pagination)
      tags: [Books]
      parameters:
        - name: available
          in: query
          schema:
            type: boolean
          description: Filter books by availability
        - name: title
          in: query
          schema:
            type: string
          description: Filter books by title
        - name: author
          in: query
          schema:
            type: string
          description: Filter books by author
        - name: cursor
          in: query
          schema:
            type: integer
            nullable: true
          description: Cursor indicating the last retrieved book ID
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of books to retrieve per request
      responses:
        200:
          description: List of books retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      books:
                        type: array
                        items:
                          $ref: "#/components/schemas/Book"
                      pagination:
                        $ref: "#/components/schemas/CursorPagination"

    post:
      summary: Create a new book
      tags: [Books]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewBook"
      responses:
        201:
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

  /api/v1/books/{book_id}:
    get:
      summary: Get a book by ID
      tags: [Books]
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        404:
          description: Book not found

    put:
      summary: Update a book or handle borrow/return logic
      tags: [Books]
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBook"
      responses:
        200:
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

    delete:
      summary: Delete a book
      tags: [Books]
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Book deleted successfully
        404:
          description: Book not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Book:
      type: object
      properties:
        _id:
          type: string
          example: 69033e4d7f11cb0842a472c9
        title:
          type: string
          example: Atomic Habits
        author:
          type: string
          example: James Clear
        available:
          type: boolean
          example: true
        borrowed_by:
          type: string
          nullable: true
          example: null

    NewBook:
      type: object
      required: [title, author]
      properties:
        title:
          type: string
          example: Python and MongoDB
        author:
          type: string
          example: James Clear

    UpdateBook:
      type: object
      properties:
        title:
          type: string
          example: Updated Title
        author:
          type: string
          example: Updated Author
        available:
          type: boolean
          example: false
        borrowed_by:
          type: string
          example: user123

    CursorPagination:
      type: object
      properties:
        limit:
          type: integer
          example: 10
        next_cursor:
          type: string
          nullable: true
          example: 69033e4d7f11cb0842a472c9
        has_next:
          type: boolean
          example: true
