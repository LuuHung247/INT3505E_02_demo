from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class NewBookBorrowed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member_id=None, book_id=None):  # noqa: E501
        """NewBookBorrowed - a model defined in OpenAPI

        :param member_id: The member_id of this NewBookBorrowed.  # noqa: E501
        :type member_id: int
        :param book_id: The book_id of this NewBookBorrowed.  # noqa: E501
        :type book_id: int
        """
        self.openapi_types = {
            'member_id': int,
            'book_id': int
        }

        self.attribute_map = {
            'member_id': 'member_id',
            'book_id': 'book_id'
        }

        self._member_id = member_id
        self._book_id = book_id

    @classmethod
    def from_dict(cls, dikt) -> 'NewBookBorrowed':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewBookBorrowed of this NewBookBorrowed.  # noqa: E501
        :rtype: NewBookBorrowed
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member_id(self) -> int:
        """Gets the member_id of this NewBookBorrowed.


        :return: The member_id of this NewBookBorrowed.
        :rtype: int
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id: int):
        """Sets the member_id of this NewBookBorrowed.


        :param member_id: The member_id of this NewBookBorrowed.
        :type member_id: int
        """
        if member_id is None:
            raise ValueError("Invalid value for `member_id`, must not be `None`")  # noqa: E501

        self._member_id = member_id

    @property
    def book_id(self) -> int:
        """Gets the book_id of this NewBookBorrowed.


        :return: The book_id of this NewBookBorrowed.
        :rtype: int
        """
        return self._book_id

    @book_id.setter
    def book_id(self, book_id: int):
        """Sets the book_id of this NewBookBorrowed.


        :param book_id: The book_id of this NewBookBorrowed.
        :type book_id: int
        """
        if book_id is None:
            raise ValueError("Invalid value for `book_id`, must not be `None`")  # noqa: E501

        self._book_id = book_id
