from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateBook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title=None, author=None, available=None):  # noqa: E501
        """UpdateBook - a model defined in OpenAPI

        :param title: The title of this UpdateBook.  # noqa: E501
        :type title: str
        :param author: The author of this UpdateBook.  # noqa: E501
        :type author: str
        :param available: The available of this UpdateBook.  # noqa: E501
        :type available: bool
        """
        self.openapi_types = {
            'title': str,
            'author': str,
            'available': bool
        }

        self.attribute_map = {
            'title': 'title',
            'author': 'author',
            'available': 'available'
        }

        self._title = title
        self._author = author
        self._available = available

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateBook':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateBook of this UpdateBook.  # noqa: E501
        :rtype: UpdateBook
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this UpdateBook.


        :return: The title of this UpdateBook.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this UpdateBook.


        :param title: The title of this UpdateBook.
        :type title: str
        """

        self._title = title

    @property
    def author(self) -> str:
        """Gets the author of this UpdateBook.


        :return: The author of this UpdateBook.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this UpdateBook.


        :param author: The author of this UpdateBook.
        :type author: str
        """

        self._author = author

    @property
    def available(self) -> bool:
        """Gets the available of this UpdateBook.


        :return: The available of this UpdateBook.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available: bool):
        """Sets the available of this UpdateBook.


        :param available: The available of this UpdateBook.
        :type available: bool
        """

        self._available = available
