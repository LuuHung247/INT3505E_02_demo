openapi: 3.0.3
info:
  title: Book Management API
  version: 1.3.0
  description: >
    API for managing books with JWT authentication and ETag support.
servers:
  - url: http://localhost:5001
    description: Local development server
security:
  - bearerAuth: []
paths:
  /api/v1/books:
    get:
      summary: Get all books with optional filters
      operationId: api_v1_books_get
      tags: [Books]
      parameters:
        - name: available
          in: query
          description: Filter books by availability
          schema:
            type: boolean
        - name: title
          in: query
          description: Filter books by title
          schema:
            type: string
        - name: author
          in: query
          description: Filter books by author
          schema:
            type: string
        - name: limit
          in: query
          description: Number of books to retrieve
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of books retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_api_v1_books_get_200_response"
      x-openapi-router-controller: openapi_server.controllers.books_controller

    post:
      summary: Create a new book
      operationId: api_v1_books_post
      tags: [Books]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewBook"
      responses:
        "201":
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
      x-openapi-router-controller: openapi_server.controllers.books_controller

  /api/v1/books/{book_id}:
    get:
      summary: Get a book by ID
      operationId: api_v1_books_book_id_get
      tags: [Books]
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
          description: Book ObjectId
      responses:
        "200":
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: Book not found
      x-openapi-router-controller: openapi_server.controllers.books_controller

    put:
      summary: Update a book or handle borrow/return logic
      operationId: api_v1_books_book_id_put
      tags: [Books]
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
          description: Book ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBook"
      responses:
        "200":
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: Book not found
      x-openapi-router-controller: openapi_server.controllers.books_controller

    delete:
      summary: Delete a book
      operationId: api_v1_books_book_id_delete
      tags: [Books]
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: string
          description: Book ObjectId
      responses:
        "200":
          description: Book deleted successfully
        "404":
          description: Book not found
      x-openapi-router-controller: openapi_server.controllers.books_controller

  /api/v1/login:
    post:
      summary: Login to obtain JWT token
      operationId: api_v1_login_post
      tags: [Auth]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_api_v1_login_post_request"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_api_v1_login_post_200_response"
        "401":
          description: Invalid credentials
      x-openapi-router-controller: openapi_server.controllers.auth_controller

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: openapi_server.controllers.security_controller.info_from_bearerAuth

  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
          example: 69033e4d7f11cb0842a472c9
        title:
          type: string
          example: The Great Gatsby
        author:
          type: string
          example: F. Scott Fitzgerald
        available:
          type: boolean
          example: true

    NewBook:
      type: object
      required: [title, author]
      properties:
        title:
          type: string
          example: Atomic Habits
        author:
          type: string
          example: James Clear

    UpdateBook:
      type: object
      properties:
        title:
          type: string
          example: Updated Title
        author:
          type: string
          example: Updated Author
        available:
          type: boolean
          example: false
        borrowed_by:
          type: string
          example: member_123

    _api_v1_books_get_200_response:
      type: object
      properties:
        data:
          type: object
          properties:
            books:
              type: array
              items:
                $ref: "#/components/schemas/Book"
        status:
          type: string
          example: success

    _api_v1_login_post_request:
      type: object
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: 123456

    _api_v1_login_post_200_response:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
