openapi: 3.0.3
info:
  description: API for managing books with JWT authentication and ETag support (Cursor-based
    pagination)
  title: Book Management API
  version: 1.3.1
servers:
- description: Local development server
  url: http://localhost:5001
security:
- bearerAuth: []
paths:
  /api/v1/books:
    get:
      operationId: api_v1_books_get
      parameters:
      - description: Filter books by availability
        explode: true
        in: query
        name: available
        required: false
        schema:
          type: boolean
        style: form
      - description: Filter books by title
        explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - description: Filter books by author
        explode: true
        in: query
        name: author
        required: false
        schema:
          type: string
        style: form
      - description: Cursor indicating the last retrieved book ID
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          nullable: true
          type: integer
        style: form
      - description: Number of books to retrieve per request
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_api_v1_books_get_200_response"
          description: List of books retrieved successfully
      summary: Get all books with optional filters (cursor-based pagination)
      tags:
      - Books
      x-openapi-router-controller: openapi_server.controllers.books_controller
    post:
      operationId: api_v1_books_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewBook"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
          description: Book created successfully
      summary: Create a new book
      tags:
      - Books
      x-openapi-router-controller: openapi_server.controllers.books_controller
  /api/v1/books/{book_id}:
    delete:
      operationId: api_v1_books_book_id_delete
      parameters:
      - explode: false
        in: path
        name: book_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Book deleted successfully
        "404":
          description: Book not found
      summary: Delete a book
      tags:
      - Books
      x-openapi-router-controller: openapi_server.controllers.books_controller
    get:
      operationId: api_v1_books_book_id_get
      parameters:
      - explode: false
        in: path
        name: book_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
          description: Book retrieved successfully
        "404":
          description: Book not found
      summary: Get a book by ID
      tags:
      - Books
      x-openapi-router-controller: openapi_server.controllers.books_controller
    put:
      operationId: api_v1_books_book_id_put
      parameters:
      - explode: false
        in: path
        name: book_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBook"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
          description: Book updated successfully
      summary: Update a book or handle borrow/return logic
      tags:
      - Books
      x-openapi-router-controller: openapi_server.controllers.books_controller
  /api/v1/login:
    post:
      operationId: api_v1_login_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/_api_v1_login_post_request"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_api_v1_login_post_200_response"
          description: "Login successful, returns JWT token"
        "401":
          description: Invalid credentials
      summary: Login to obtain JWT token
      tags:
      - Auth
      x-openapi-router-controller: openapi_server.controllers.auth_controller
components:
  schemas:
    Book:
      example:
        borrowed_by: borrowed_by
        author: James Clear
        available: true
        _id: 69033e4d7f11cb0842a472c9
        title: Atomic Habits
      properties:
        _id:
          example: 69033e4d7f11cb0842a472c9
          title: _id
          type: string
        title:
          example: Atomic Habits
          title: title
          type: string
        author:
          example: James Clear
          title: author
          type: string
        available:
          example: true
          title: available
          type: boolean
        borrowed_by:
          nullable: true
          title: borrowed_by
          type: string
          example: null
      title: Book
      type: object
    NewBook:
      example:
        author: James Clear
        title: Python and MongoDB
      properties:
        title:
          example: Python and MongoDB
          title: title
          type: string
        author:
          example: James Clear
          title: author
          type: string
      required:
      - author
      - title
      title: NewBook
      type: object
    UpdateBook:
      example:
        borrowed_by: user123
        author: Updated Author
        available: false
        title: Updated Title
      properties:
        title:
          example: Updated Title
          title: title
          type: string
        author:
          example: Updated Author
          title: author
          type: string
        available:
          example: false
          title: available
          type: boolean
        borrowed_by:
          example: user123
          title: borrowed_by
          type: string
      title: UpdateBook
      type: object
    CursorPagination:
      example:
        next_cursor: 69033e4d7f11cb0842a472c9
        limit: 10
        has_next: true
      properties:
        limit:
          example: 10
          title: limit
          type: integer
        next_cursor:
          example: 69033e4d7f11cb0842a472c9
          nullable: true
          title: next_cursor
          type: string
        has_next:
          example: true
          title: has_next
          type: boolean
      title: CursorPagination
      type: object
    _api_v1_login_post_request:
      properties:
        username:
          example: admin
          title: username
          type: string
        password:
          example: "123456"
          title: password
          type: string
      title: _api_v1_login_post_request
      type: object
    _api_v1_login_post_200_response_data:
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      properties:
        token:
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          title: token
          type: string
      title: _api_v1_login_post_200_response_data
      type: object
    _api_v1_login_post_200_response:
      example:
        data:
          token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      properties:
        data:
          $ref: "#/components/schemas/_api_v1_login_post_200_response_data"
      title: _api_v1_login_post_200_response
      type: object
    _api_v1_books_get_200_response_data:
      example:
        books:
        - borrowed_by: borrowed_by
          author: James Clear
          available: true
          _id: 69033e4d7f11cb0842a472c9
          title: Atomic Habits
        - borrowed_by: borrowed_by
          author: James Clear
          available: true
          _id: 69033e4d7f11cb0842a472c9
          title: Atomic Habits
        pagination:
          next_cursor: 69033e4d7f11cb0842a472c9
          limit: 10
          has_next: true
      properties:
        books:
          items:
            $ref: "#/components/schemas/Book"
          title: books
          type: array
        pagination:
          $ref: "#/components/schemas/CursorPagination"
      title: _api_v1_books_get_200_response_data
      type: object
    _api_v1_books_get_200_response:
      example:
        data:
          books:
          - borrowed_by: borrowed_by
            author: James Clear
            available: true
            _id: 69033e4d7f11cb0842a472c9
            title: Atomic Habits
          - borrowed_by: borrowed_by
            author: James Clear
            available: true
            _id: 69033e4d7f11cb0842a472c9
            title: Atomic Habits
          pagination:
            next_cursor: 69033e4d7f11cb0842a472c9
            limit: 10
            has_next: true
      properties:
        data:
          $ref: "#/components/schemas/_api_v1_books_get_200_response_data"
      title: _api_v1_books_get_200_response
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: openapi_server.controllers.security_controller.info_from_bearerAuth
