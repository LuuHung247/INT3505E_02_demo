openapi: 3.0.3
info:
  title: Book Management API
  description: Simple API for managing books with JWT authentication and ETag support
  version: 1.1.0

servers:
  - url: http://localhost:5001
    description: Local development server

# Áp dụng Bearer token mặc định cho toàn bộ API
security:
  - bearerAuth: []

paths:
  /api/v1/login:
    post:
      summary: Login to obtain JWT token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: admin
                password:
                  type: string
                  example: 123456
      responses:
        200:
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  message:
                    type: string
                    example: Login successful
        401:
          description: Invalid credentials

  /api/v1/books:
    get:
      summary: Get all books
      security:
        - bearerAuth: []
      tags: [Books]
      parameters:
        - name: available
          in: query
          description: Filter books by availability (true or false)
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Successfully retrieved list of books
          headers:
            ETag:
              description: Resource version identifier
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"
                  message:
                    type: string
                    example: Book list retrieved successfully
        304:
          description: Not modified (ETag matched)
        401:
          description: Unauthorized – missing or invalid token

    post:
      summary: Create a new book
      security:
        - bearerAuth: []
      tags: [Books]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewBook"
      responses:
        201:
          description: Book created successfully
          headers:
            ETag:
              description: Resource version identifier
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/Book"
                  message:
                    type: string
                    example: Book created
        400:
          description: Missing title or author
        401:
          description: Unauthorized – missing or invalid token

  /api/v1/books/{book_id}:
    get:
      summary: Get a specific book by ID
      security:
        - bearerAuth: []
      tags: [Books]
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Book found
          headers:
            ETag:
              description: Resource version identifier
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/Book"
                  message:
                    type: string
                    example: Book retrieved
        304:
          description: Not modified (ETag matched)
        404:
          description: Book not found
        401:
          description: Unauthorized – missing or invalid token

    put:
      summary: Update a book or change its availability (borrow/return)
      security:
        - bearerAuth: []
      tags: [Books]
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBook"
      responses:
        200:
          description: Book updated, borrowed, or returned successfully
          headers:
            ETag:
              description: Resource version identifier
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/Book"
                  message:
                    type: string
                    example: Book borrowed
        400:
          description: Invalid request or borrowing an already borrowed book
        404:
          description: Book not found
        401:
          description: Unauthorized – missing or invalid token

    delete:
      summary: Delete a book by ID
      security:
        - bearerAuth: []
      tags: [Books]
      parameters:
        - name: book_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: "null"
                    example: null
                  message:
                    type: string
                    example: Book deleted
        404:
          description: Book not found
        401:
          description: Unauthorized – missing or invalid token

components:
  # Cấu hình bảo mật JWT Bearer cho Swagger UI
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: The Great Gatsby
        author:
          type: string
          example: F. Scott Fitzgerald
        available:
          type: boolean
          example: true

    NewBook:
      type: object
      required:
        - title
        - author
      properties:
        title:
          type: string
          example: Atomic Habits
        author:
          type: string
          example: James Clear

    UpdateBook:
      type: object
      properties:
        title:
          type: string
          example: New Title
        author:
          type: string
          example: New Author
        available:
          type: boolean
          example: false
